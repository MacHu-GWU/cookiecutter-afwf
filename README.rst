.. image:: https://img.shields.io/badge/Release_History!--None.svg?style=social
    :target: https://github.com/MacHu-GWU/cookiecutter-afwf/blob/main/release-history.rst

.. image:: https://img.shields.io/badge/STAR_Me_on_GitHub!--None.svg?style=social
    :target: https://github.com/MacHu-GWU/cookiecutter-afwf

Welcome to ``cookiecutter-afwf`` Documentation
==============================================================================
This is a `cookiecutter <https://github.com/cookiecutter/cookiecutter>`_ project template for advanced `Alfred Workflow <https://www.alfredapp.com/workflows/>`_ development in Python.

I suggest read the document of the following project to learn the best practice doing Alfred Workflow development in Python:

- `afwf Python library <https://github.com/MacHu-GWU/afwf-project>`_: A powerful framework enables fast and elegant development of Alfred Workflows in Python.
- `afwf_example-project <https://github.com/MacHu-GWU/afwf_example-project>`_: a sample Alfred Workflow project generated by ``cookiecutter-afwf``. It shows you how to create a production ready Alfred Workflow in Python.


Usage
------------------------------------------------------------------------------
Enter the following command, it will use the latest template.

.. code-block:: bash

    pip install cookiecutter && cookiecutter https://github.com/MacHu-GWU/cookiecutter-afwf

Or, you can use a specific released version, you can find `full list of release at here <https://github.com/MacHu-GWU/cookiecutter-afwf/releases>`_.

.. code-block:: bash

    cookiecutter https://github.com/MacHu-GWU/cookiecutter-afwf --checkout tags/${version}

For example (v3 is the latest as of 2024-01-01)

.. code-block:: bash

    cookiecutter https://github.com/MacHu-GWU/cookiecutter-afwf --checkout tags/v3

Then fill in some information::

    package_name [your_package_name_with_underscore]: ...
    github_username [your-github-username]: ...
    author_name [Firstname Lastname]: ...
    author_email [firstname.lastname@email.com]: ...
    dir_workflow [/Users/username/path/to/Alfred.alfredpreferences/workflows/user.workflow.ABCD1234-A1B2-C3D4-E5F6-A1B2C3D4E5F6]: ...
    semantic_version [0.1.1]: ...
    ...

Then it will generate a Git repo folder structures like this:

- ``/${package_name}/...`` your python project source code
- ``/bin/...``: automation
- ``/tests/...``: unit test
- ``/.coveragerc``: code coverage test config
- ``/pyproject.toml``: Python project metadata
- ``/main.py``: Alfred Workflow entry point script

You may need to edit the ``pyproject.toml`` to set your Python version and add more dependencies for your project.
